Coverity Playground - Kill your working hours

    This place helps FAEs to setup a basic Coverity environment for demo purpose.

    It will also help you play with all the fancy functionalies about Coverity SDLC 
    integration such as Jenkins, JIRA, Web API, and SCM.

    Work Flows

    - developers use run.py to analyse only the modified code by Coverity before
      check-in into git
        - fast incremental build/analyze
        - clean before check-in
        - No inter-procedural defects
    - Server CI (Jenkins) runs run.sh for a nightly build and cov-commit-defect to 
      Coverity connect

    Jenkins

    - Setup Jenkins user to the same as Coverity user at /etc/default/jenkins
        JENKINS_USER=yuan
        JENKINS_GROUP=yuan
    - Change Jenkins file owner to Coverity user e.g.
        chown yuan:yuan /var/lib/jenkins
        chown yuan:yuan /var/cache/jenkins
        chown yuan:yuan /var/log/jenkins
    - restart Jenkins
        sudo service restart jenkins
    - Create freestyle project in Jenkins
    - Run run.sh in Jenkins to initiate Coverity configure/build/analyze/commit

    - Install and configure Coverity Jenkins plugin
    - Add Coverity in post build actions
      - Specify streams
      - Select defect filter options (e.g. select impact is among 'high')
      - Select 'Fail the build if matching defects are found'
      - The options can take effect without using Coverity plugin to build/analyze/
        commits, etc. You can use your own build script to run Coverity commands.

    LDAP

    - There is really not so much to say about LDAP. Google "LDAP setup" and you will
      find some easy setup for LDAP itself.
    - On CC side, go to system->LDAP configuration->create a new LDAP
      e.g.
          Base DN: dc=coverity,dc=com
          Bind DN: cn=admin,dc=coverity,dc=com
    - Go to Users & Groups, users can be either created or matched from LDAP
    - Tip: LDAP default user name is initial of first name + last name, like
      ychen for myself

    Defect Auto Assignment Based on Git

    - Projects & Streams -> select stream -> Owner Assignment -> Derieved from SCM
    - The git user name read by Coverity is in e-mail format. Therefore, you need a
      simple mapping in System -> Automatic Owner Assignment
      - Import customized .json file
    - Add cov-import-scm command between cov-build and cov-analyze to import SCM data
    - defect is automatically assigned to author. Author name can also be seen in line
      with code
      
    E-mail Notification

    - Ensure test e-mail is sent and received in email notification and delivery
    - Setup view under 'Issues: by Snapshot' for a component
    - Setup 'notification' for the view - users/groups and date/time
    - default e-mail contains accumulation of defects of all time. Setup 'Snapshot 
      Scope' for newly introduced defects only
      e.g. Show: last()
           Compared to: lastBefore(last())

    Web Service API

    - Implementation is not for free (free beer, free speech, or whatever kind)
    - So read the document CoverityÂ® Platform Web Services API Reference
    - Notice some APIs may not be available on old versions
    - FAE can find some internal examples from your colleague
    

    fast desktop

    - It saves time by only building and analyzing modified files
    - Coverity defects clear before check-in

    - Consider use plugin for IDEs first, which is the most convenient method
    - Consider the style in incremental build in run.py, which gives you a plain text
      for the details of defects
    - Setup ~/.coverity/coverity.conf. But this file only works with cov-run-desktop, 
      which means you still have to give options like 'host' and 'user' in other commands 

